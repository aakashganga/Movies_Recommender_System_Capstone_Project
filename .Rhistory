sapply(mov_df, function(y) sum(length(which(is.na(y)))))
mdata <- melt(mov_df, id=c("MovieID","MovieTitle","ReleaseYear"))
#sapply(mdata, function(y) sum(length(which(is.na(y)))))
# removing records where value is NA
mdata <- mdata[!is.na(mdata$value),]
sapply(mdata, function(y) sum(length(which(is.na(y)))))
# The 1 indicates that the movie has been classified into certain Generes
mdata$Type <- 1
mov_df <- dcast(mdata, MovieID + MovieTitle + ReleaseYear ~ value, value.var="Type")
# replacing all NA values with 0
mov_df[is.na(mov_df)] <- 0
str(mov_df)
#sapply(mov_df, class)
# check to see if any punctuation characters are present in the dataframe
sapply(mov_df, function(y) sum(length(grep("[^[:alnum:]]", y))))
rm(mdata)
# similar to the above last 5 lines (but issues warnings on dropping variables due to non-facor classification)
#mv_g <- t %>% gather(Genere, value, Genere_1:Genere_6, na.rm = FALSE)
#mv_g$Type <- 1
#mv_s <- mv_g %>% spread(value, Type, fill = 0)
#mv_s$Genere <- NULL
# converting the generes to factors
#gen_facs <- names(mv_s[-1:-3])
#mv_f <- mv_s
#mv_f[,gen_facs] <- lapply(mv_f[,gen_facs], factor)
#str(mv_f)
#mv_f <- subset.data.frame(mv_s,select = Action:Western)
#mv_f[] <- lapply(mv_f, as.factor)
# ================= READING USRS.DAT FILE, DISCOVERY AND TRANSFORMATION ==========================================
# reading the users.dat file
usrs_lines <- readLines("users.dat")
head(usrs_lines)
Matrix <- do.call(rbind, strsplit(usrs_lines,"::", fixed=TRUE))
usrs_df <- data.frame(Matrix, stringsAsFactors = FALSE)
names(usrs_df) <- c("UserID", "Gender", "Age", "OccupationID", "ZipCode")
str(usrs_df)
# Before convering certain variables to their correct types it is important to
# check for special chars in the entire usr_df dataframe
# the result of the above will indicate which columns have issues
sapply(usrs_df, function(y) sum(length(grep("[^[:alnum:]]", y))))
#sapply(usrs_df, function(y) sum(length(grep("[A-Za-z]", y))))
# since Zipcode column is showing 66 non-alphanumeric values, we need to see what these are
#non_alnum_char_logical <- grepl("[^[:alnum:]]", usrs_df$ZipCode)
#head(usrs_df$ZipCode[non_alnum_char_logical])
# or we can use:
head(grep("[^[:alnum:]]", usrs_df$ZipCode, value = TRUE))
#f <- function(s) strsplit(s, "_")[[1]][1]
# since all US Zipcodes are 5 digits, selecting only the LHS values before the "-" (which are 5 digits)
# and replacing them back in the same place
usrs_df$ZipCode <- sub("(\\d{5}).*", "\\1", usrs_df$ZipCode)
# changing all columns but Gender to numeric
usrs_df[, colnames(usrs_df) != "Gender"] <- lapply(usrs_df[, colnames(usrs_df) != "Gender"], as.numeric)# converting certain variables to correct types
str(usrs_df)
#checking to see if there is any variation in how the Gender is entered
unique(usrs_df$Gender)
rm(usrs_lines, Matrix)
# reading the ratings.dat file
ratings_lines <- readLines("ratings.dat")
head(ratings_lines)
Matrix <- do.call(rbind, strsplit(ratings_lines,"::", fixed=TRUE))
ratings_df <- data.frame(Matrix, stringsAsFactors = FALSE)
names(ratings_df) <- c("UserID", "MovieID", "Rating", "TimeStamp")
str(ratings_df)
rm(ratings_lines, Matrix)
check_df(ratings_df)
# Again changing all columns to numeric except Timestamp as it is a Date type
#ratings_df[, colnames(ratings_df) != "TimeStamp"] <- lapply(ratings_df[, colnames(ratings_df) != "TimeStamp"], as.numeric)
ratings_df[, colnames(ratings_df)] <- lapply(ratings_df[, colnames(ratings_df)], as.numeric)
# Now epoch or UNIX time is given in the TimeStamp - so extracting the date and time from it
ratings_df$Date <- strftime(as.POSIXct(ratings_df$TimeStamp, origin = "1970-01-01", tz =""),"%Y-%m-%d")
ratings_df$Time <- strftime(as.POSIXct(ratings_df$TimeStamp, origin = "1970-01-01", tz =""),"%H:%M:%S")
# creating the occupation ref dataframe
occup_df <- read.csv("occupation.dat", sep = ":", header = FALSE, stringsAsFactors = FALSE, colClasses = c("numeric","character"))
names(occup_df) <- c("OccupationID", "Occupation")
str(occup_df)
# creating the ages ref dataframe
age_df <- read.csv("ages.dat", sep = ":", header = FALSE, stringsAsFactors = FALSE, colClasses = c("numeric","character"))
names(age_df) <- c("Age", "AgeRange")
str(age_df)
# once all the dataframes are prepared and checked, we can now join them to the ratings_df (as this is the base df which
# brings all the other dfs together)
usrs_df <- left_join(usrs_df, age_df, by = "Age")
usrs_df <- left_join(usrs_df, occup_df, by = "OccupationID")
head(usrs_df)
# reordering columns
usrs_df <- usrs_df[, c("UserID", "Age", "AgeRange", "Gender", "OccupationID", "Occupation", "ZipCode")]
full_mov_df <- left_join(ratings_df, usrs_df, by = "UserID")
full_mov_df <- left_join(full_mov_df, mov_df, by = "MovieID")
rm(age_df,occup_df,usrs_df,mov_df,ratings_df, non_alnum_char_logical)
# lastly, Gender and Generes need to be changed to factors
#cols_names_to_factor
full_mov_df$Rating <- as.factor(full_mov_df$Rating)
full_mov_df$AgeRange <- as.factor(full_mov_df$AgeRange)
full_mov_df$Gender <- as.factor(full_mov_df$Gender)
full_mov_df$Occupation <- as.factor(full_mov_df$Occupation)
full_mov_df$MovieTitle <- as.factor(full_mov_df$MovieTitle)
full_mov_df$ReleaseYear <- as.factor(full_mov_df$ReleaseYear)
# converting generes to factors which are from col 15 to 32 in the full_mov_df
full_mov_df[15:32] <- lapply(full_mov_df[15:32], as.factor)
#mv_f <- subset.data.frame(full_mov_df, select = Action:Western)
#mv_f[] <- lapply(mv_f, as.factor)
# creating the genere ref dataframe
#genere_df <- read.csv("genere.csv", sep = ",", header = FALSE)
#names(genere_df) <- c("GenereID", "Genere")
# listing out all the generes in the mov_df
#genere_list <- unlist(strsplit(as.character(mov_df$Genere), "\\|"))
# count the occurances of each genere in the mov_df
#table(genere_list)
# listing out all the unique generes in the mov_df
#genere_list_unique <- unique(genere_list)
genere_dist <- full_mov_df %>%
select(Action:Western) %>%
replace(is.na(.),0) %>%
summarise_each(funs(sum)) %>%
gather(Genere, Freq, Action:Western) %>%
arrange(desc(Freq))
library(scales) #needed for formatting y axis labels to non-scientific type
# Plot the bars of the data in each genere to udnerstand the data distribution
ggplot(aes(x=Genere, y=Freq), data = genere_dist) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = comma)
#or use the below to order the generes from high to low
ggplot(aes(x=reorder(Genere, -Freq), y=Freq), data = genere_dist) +
geom_bar(stat = "identity") +
xlab("Generes") +
ylab("Count") +
scale_y_continuous(labels = comma)
# the result shows that there is a large bias towards Drama and Comedy generes meaning that the data
# contains more movies with these 2 generes than the rest
# to show %
ggplot(aes(x=reorder(Genere, -Freq), y=(Freq/sum(Freq))), data = genere_dist) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = percent) +
xlab("Generes") +
ylab("Percent")
# Q1 - Are any Generes popular within age groups
age_genere_df <- full_mov_df %>%
select(Age, Action:Western) %>%
replace(is.na(.),0) %>%
group_by(Age) %>%
summarise_each(funs(sum))
full_mov_df %>% select(MovieTitle, Rating, Age, Gender) %>% filter(Rating == 5, !is.na(MovieTitle)) %>% group_by(Age, Gender)
trial <- full_mov_df %>%
select(AgeRange, Gender, Action:Western) %>%
gather(Genere, Freq, -c(AgeRange, Gender)) %>%
mutate(count = n())
head(trial)
library(ggplot2)
#looking at ages, gender and occupation relationships
ggplot(full_mov_df, aes(AgeRange, fill = Gender)) + geom_bar() + facet_wrap(~Occupation)
ggplot(aes(x = Age), data = trial) +
geom_histogram(binwidth = 0.5) +
facet_wrap(~Genere)
qplot(x = Age, data = trial) +
facet_wrap(~Genere)
# need to gather columns to plot histograms
library(caret) # for Classificaton and regression training (modeling)
library(doSNOW)# for parallel adaptors
#tdf1 <- separate(tdf, 'Genere', paste("Gen", 1:len_longest_genere_str, sep="_"), extra="drop")
#mov_df$Type <- 1
#mov_df1 <- dcast(mov_df, MovieID + MovieTitle + Year  ~ Genere, value.var="Type")
#within(tdf, Gen <- data.frame(do.call('rbind', strsplit(as.character(tdf$Genere), '|', fixed=TRUE))))
#df <- data.frame(ID=11:13, FOO=c('a|b','b|c','x|y'))
#within(df, FOO<-data.frame(do.call('rbind', strsplit(as.character(FOO), '|', fixed=TRUE))))
#foo <- data.frame(do.call('rbind', strsplit(as.character(df$FOO),'|',fixed=TRUE)))
#gsub('.+\\(([0-9]+)\\).+?$', '\\1', ln1)
# find the title with the most number of generes
# this will be the longest string
# convert genere column in mov_df to character
#mov_df$Genere <- as.character(mov_df$Genere)
#longest_string <- max(nchar(mov_df$Genere))
# print the string to find the max number of generes
#longest_genere_str <- mov_df$Genere[nchar(mov_df$Genere) == longest_string]
#len_longest_genere_str <- length(unlist(strsplit(longest_genere_str,"\\|")))
install.packages("sqldf")
install.packages("reshape2")
install.packages("reshape2")
test(full_mov_df,0)
unique(full_mov_df$MovieTitle)
View(full_mov_df)
full_mov_df[is.na(full_mov_df$MovieTitle)]
count(full_mov_df[,is.na(full_mov_df$MovieTitle)])
mov_lines <- readLines("movies.dat")
# looking at the first few lines of the movie data to find out how it looks and what transformations will be necessary
head(mov_lines)
# Transforming the lines into a Matrix and then into a mov_df dataframe
Matrix <- do.call(rbind, strsplit(mov_lines,"::", fixed=TRUE))
mov_df <- as.data.frame(Matrix)
# Checking the first few records of the mov_df dataframe
head(mov_df)
# From the readme file included, assigning the relevant column/variable names
names(mov_df) <- c("MovieID", "MovieTitle","Genere")
# Running the utility function to check the mov_df dataframe
check_df(mov_df)
str(mov_df)
# since all variable types are factors, some will need appropriate conversion
# converting MovieTitle to character vector
mov_df$MovieTitle <- as.character(mov_df$MovieTitle)
# converting MovieID to numeric vector
mov_df$MovieID <- as.numeric(mov_df$MovieID)
# Extracting the release year portion from the MovieTitle variable
mov_year <- extract_numeric(substr(mov_df$MovieTitle, nchar(mov_df$MovieTitle)-5, nchar(mov_df$MovieTitle)))
mov_title <- substr(mov_df$MovieTitle, 1, nchar(mov_df$MovieTitle)-7)
# Reassigning the data back to the MovieTitle variable without the year
mov_df$MovieTitle <- mov_title
# Creating a Release year column in the mov_df
mov_df$ReleaseYear <- mov_year
head(mov_df)
sapply(mov_df, function(y) sum(length(which(is.na(y)))))
rm(mov_title, mov_year, mov_lines, Matrix)
mov_df <- cSplit(mov_df, "Genere", sep="|")
sapply(mov_df, function(y) sum(length(which(is.na(y)))))
mdata <- melt(mov_df, id=c("MovieID","MovieTitle","ReleaseYear"))
sapply(mdata, function(y) sum(length(which(is.na(y)))))
mdata <- mdata[!is.na(mdata$value),]
sapply(mdata, function(y) sum(length(which(is.na(y)))))
count(unique(mdata$MovieTitle))
tally(mdata$MovieTitle)
tally(as.factor(mdata$MovieTitle)
)
mov_lines <- readLines("movies.dat")
# looking at the first few lines of the movie data to find out how it looks and what transformations will be necessary
head(mov_lines)
# Transforming the lines into a Matrix and then into a mov_df dataframe
Matrix <- do.call(rbind, strsplit(mov_lines,"::", fixed=TRUE))
mov_df <- as.data.frame(Matrix)
# Checking the first few records of the mov_df dataframe
head(mov_df)
# From the readme file included, assigning the relevant column/variable names
names(mov_df) <- c("MovieID", "MovieTitle","Genere")
# Running the utility function to check the mov_df dataframe
check_df(mov_df)
str(mov_df)
# since all variable types are factors, some will need appropriate conversion
# converting MovieTitle to character vector
mov_df$MovieTitle <- as.character(mov_df$MovieTitle)
# converting MovieID to numeric vector
mov_df$MovieID <- as.numeric(mov_df$MovieID)
# Extracting the release year portion from the MovieTitle variable
mov_year <- extract_numeric(substr(mov_df$MovieTitle, nchar(mov_df$MovieTitle)-5, nchar(mov_df$MovieTitle)))
mov_title <- substr(mov_df$MovieTitle, 1, nchar(mov_df$MovieTitle)-7)
# Reassigning the data back to the MovieTitle variable without the year
mov_df$MovieTitle <- mov_title
# Creating a Release year column in the mov_df
mov_df$ReleaseYear <- mov_year
head(mov_df)
# checking the transformed structure of the mov_df dataframe
sapply(mov_df, class)
# tidying up the environment
rm(mov_title, mov_year, mov_lines, Matrix)
test(mov_df,0)
sapply(mov_df, function(y) sum(length(grep("[^[:alnum:]]", y))))
mov_df <- cSplit(mov_df, "Genere", sep="|")
test(mov_df,0)
mdata <- melt(mov_df, id=c("MovieID","MovieTitle","ReleaseYear"))
test(mdata, 0)
View(mdata)
3883*6
mdata <- mdata[!is.na(mdata$value),]
test(mdata, 0)
mdata$Type <- 1
mov_df <- dcast(mdata, MovieID + MovieTitle + ReleaseYear ~ value, value.var="Type")
test(mov_df,0)
test(full_mov_df,0)
full_mov_df[,!is.na(full_mov_df[13:32])]
full_mov_df[is.na(full_mov_df),13:32]
head(full_mov_df[,13:32])
head(full_mov_df[,13:32] == "NA")
head(full_mov_df[,13:32] == is.na())
head(full_mov_df[,13:32] == is.na
)
which(!rowSums(!is.na(full_mov_df)))
which(!rowSums(!is.na(full_mov_df[,13:32])))
full_mov_df[876112,13:32]
full_mov_df[876112,]
mov_df[3927]
mov_df[mov_df$MovieID == 3927]
mov_df[mov_df$MovieID == "3927"]
mov_df[3927]
check_df(mov_df,2)
test(mov_df,2)
View(mov_df)
mov_lines <- readLines("movies.dat")
# looking at the first few lines of the movie data to find out how it looks and what transformations will be necessary
head(mov_lines)
# Transforming the lines into a Matrix and then into a mov_df dataframe
Matrix <- do.call(rbind, strsplit(mov_lines,"::", fixed=TRUE))
mov_df <- as.data.frame(Matrix)
names(mov_df) <- c("MovieID", "MovieTitle","Genere")
check_df(mov_df)
aggregate(cbind(mov_df[0],numdup=1), mov_df, length)
Matrix?
??
?do.call
?rbiing
?rbind
?readLines
unique(full_mov_df$MovieID)
length(unique(full_mov_df$MovieID))
length(full_mov_df$MovieID)
length(mov_df$MovieID)
length(unique(mov_df$MovieID))
length(is.na(full_mov_df$MovieTitle)
)
length(full_mov_df[is.na(full_mov_df$MovieTitle)])
length(full_mov_df[is.na(full_mov_df$MovieTitle),])
length(is.na(full_mov_df$MovieTitle))
length(full_mov_df[!is.na(full_mov_df$MovieTitle),])
View(full_mov_df)
check_df <- function(y, ...){
if(... == 0){
df_records_count <- sapply(y, function(x) sum(length(x)))
print("Checking for the total number of records in the dataframe to ensure completeness:")
cat("\n")
print(df_records_count)
cat("\n\n")
df_missing_data <- sapply(y, function(x) sum(length(which(is.na(x)))))
print("Checking for the total number of missing values (NA) in the dataframe if any:")
cat("\n")
print(df_missing_data)
}
if(... == 1){
df_records_count <- sapply(y, function(x) sum(length(x)))
print("Checking for the total number of records in the dataframe to ensure completeness:")
cat("\n")
print(df_records_count)
cat("\n\n")
}
if(... == 2){
df_missing_data <- sapply(y, function(x) sum(length(which(is.na(x)))))
print("Checking for the total number of missing values (NA) in the dataframe if any:")
cat("\n")
print(df_missing_data)
}
}
rm(test)
ls()
rm(list = ls())
# Installing certain packages and loading all required libraries
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
install.packages("sqldf")
install.packages("reshape2")
suppressMessages(library (sqldf))
suppressMessages(library(reshape2))
suppressMessages(library(splitstackshape))
suppressMessages(library(scales))
# Clearing the R-console window
cat("\014")
# Clearing the working environment
rm(list = ls())
## Creating a utility function to perform basic checks on the dataframes
check_df <- function(y, ...){
if(... == 0){
df_records_count <- sapply(y, function(x) sum(length(x)))
print("Checking for the total number of records in the dataframe to ensure completeness:")
cat("\n")
print(df_records_count)
cat("\n\n")
df_missing_data <- sapply(y, function(x) sum(length(which(is.na(x)))))
print("Checking for the total number of missing values (NA) in the dataframe if any:")
cat("\n")
print(df_missing_data)
}
if(... == 1){
df_records_count <- sapply(y, function(x) sum(length(x)))
print("Checking for the total number of records in the dataframe to ensure completeness:")
cat("\n")
print(df_records_count)
cat("\n\n")
}
if(... == 2){
df_missing_data <- sapply(y, function(x) sum(length(which(is.na(x)))))
print("Checking for the total number of missing values (NA) in the dataframe if any:")
cat("\n")
print(df_missing_data)
}
}
# reading the movies.dat file
mov_lines <- readLines("movies.dat")
# looking at the first few lines of the movie data to find out how it looks and what transformations will be necessary
head(mov_lines)
# Transforming the lines into a Matrix and then into a mov_df dataframe
Matrix <- do.call(rbind, strsplit(mov_lines,"::", fixed=TRUE))
mov_df <- as.data.frame(Matrix)
# Checking the first few records of the mov_df dataframe
head(mov_df)
# From the readme file included, assigning the relevant column/variable names
names(mov_df) <- c("MovieID", "MovieTitle","Genere")
# Running the utility function to check the mov_df dataframe
check_df(mov_df, 0)
str(mov_df)
# since all variable types are factors, some will need appropriate conversion
# converting MovieTitle to character vector
mov_df$MovieTitle <- as.character(mov_df$MovieTitle)
# converting MovieID to numeric vector
mov_df$MovieID <- as.numeric(mov_df$MovieID)
# Extracting the release year portion from the MovieTitle variable
mov_year <- extract_numeric(substr(mov_df$MovieTitle, nchar(mov_df$MovieTitle)-5, nchar(mov_df$MovieTitle)))
mov_title <- substr(mov_df$MovieTitle, 1, nchar(mov_df$MovieTitle)-7)
# Reassigning the data back to the MovieTitle variable without the year
mov_df$MovieTitle <- mov_title
# Creating a Release year column in the mov_df
mov_df$ReleaseYear <- mov_year
head(mov_df)
# checking the transformed structure of the mov_df dataframe
sapply(mov_df, class)
# tidying up the environment
rm(mov_title, mov_year, mov_lines, Matrix)
# checks for special chars in the entire mov_df
# the result of the above will indicate which columns have issues
sapply(mov_df, function(y) sum(length(grep("[^[:alnum:]]", y))))
# split the Genere column to corresponding Generes which are separated by "|"
mov_df <- cSplit(mov_df, "Genere", sep="|")
#sapply(mov_df, class)
#sapply(mov_df, function(y) sum(length(which(is.na(y)))))
test(mov_df,0)
mdata <- melt(mov_df, id=c("MovieID","MovieTitle","ReleaseYear"))
#sapply(mdata, function(y) sum(length(which(is.na(y)))))
test(mdata, 0)
# removing records where value is NA
mdata <- mdata[!is.na(mdata$value),]
#sapply(mdata, function(y) sum(length(which(is.na(y)))))
test(mdata, 0)
# The 1 indicates that the movie has been classified into certain Generes
mdata$Type <- 1
mov_df <- dcast(mdata, MovieID + MovieTitle + ReleaseYear ~ value, value.var="Type")
test(mov_df,0)
# replacing all NA values with 0
mov_df[is.na(mov_df)] <- 0
str(mov_df)
# check to see if any punctuation characters are present in the dataframe
sapply(mov_df, function(y) sum(length(grep("[^[:alnum:]]", y))))
#rm(mdata)
# ================= READING USRS.DAT FILE, DISCOVERY AND TRANSFORMATION ==========================================
# reading the users.dat file
usrs_lines <- readLines("users.dat")
head(usrs_lines)
Matrix <- do.call(rbind, strsplit(usrs_lines,"::", fixed=TRUE))
usrs_df <- data.frame(Matrix, stringsAsFactors = FALSE)
names(usrs_df) <- c("UserID", "Gender", "Age", "OccupationID", "ZipCode")
str(usrs_df)
# Before convering certain variables to their correct types it is important to
# check for special chars in the entire usr_df dataframe
# the result of the above will indicate which columns have issues
sapply(usrs_df, function(y) sum(length(grep("[^[:alnum:]]", y))))
# we can use:
head(grep("[^[:alnum:]]", usrs_df$ZipCode, value = TRUE))
# since all US Zipcodes are 5 digits, selecting only the LHS values before the "-" (which are 5 digits)
# and replacing them back in the same place
usrs_df$ZipCode <- sub("(\\d{5}).*", "\\1", usrs_df$ZipCode)
# changing all columns but Gender to numeric
usrs_df[, colnames(usrs_df) != "Gender"] <- lapply(usrs_df[, colnames(usrs_df) != "Gender"], as.numeric)# converting certain variables to correct types
str(usrs_df)
#checking to see if there is any variation in how the Gender is entered
unique(usrs_df$Gender)
rm(usrs_lines, Matrix)
# reading the ratings.dat file
ratings_lines <- readLines("ratings.dat")
head(ratings_lines)
Matrix <- do.call(rbind, strsplit(ratings_lines,"::", fixed=TRUE))
ratings_df <- data.frame(Matrix, stringsAsFactors = FALSE)
names(ratings_df) <- c("UserID", "MovieID", "Rating", "TimeStamp")
str(ratings_df)
rm(ratings_lines, Matrix)
check_df(ratings_df, 0)
# Again changing all columns to numeric
ratings_df[, colnames(ratings_df)] <- lapply(ratings_df[, colnames(ratings_df)], as.numeric)
# Now epoch or UNIX time is given in the TimeStamp - so extracting the date and time from it
ratings_df$Date <- strftime(as.POSIXct(ratings_df$TimeStamp, origin = "1970-01-01", tz =""),"%Y-%m-%d")
ratings_df$Time <- strftime(as.POSIXct(ratings_df$TimeStamp, origin = "1970-01-01", tz =""),"%H:%M:%S")
# creating the occupation ref dataframe
occup_df <- read.csv("occupation.dat", sep = ":", header = FALSE, stringsAsFactors = FALSE, colClasses = c("numeric","character"))
names(occup_df) <- c("OccupationID", "Occupation")
str(occup_df)
# creating the ages ref dataframe
age_df <- read.csv("ages.dat", sep = ":", header = FALSE, stringsAsFactors = FALSE, colClasses = c("numeric","character"))
names(age_df) <- c("Age", "AgeRange")
str(age_df)
# once all the dataframes are prepared and checked, we can now join them to the ratings_df (as this is the base df which
# brings all the other dfs together)
usrs_df <- left_join(usrs_df, age_df, by = "Age")
usrs_df <- left_join(usrs_df, occup_df, by = "OccupationID")
head(usrs_df)
# reordering columns
usrs_df <- usrs_df[, c("UserID", "Age", "AgeRange", "Gender", "OccupationID", "Occupation", "ZipCode")]
full_mov_df <- left_join(ratings_df, usrs_df, by = "UserID")
full_mov_df <- left_join(full_mov_df, mov_df, by = "MovieID")
check_df(full_mov_df, 0)
#rm(age_df,occup_df,usrs_df,mov_df,ratings_df)
#cols_names_to_factor
full_mov_df$Rating <- as.factor(full_mov_df$Rating)
full_mov_df$AgeRange <- as.factor(full_mov_df$AgeRange)
full_mov_df$Gender <- as.factor(full_mov_df$Gender)
full_mov_df$Occupation <- as.factor(full_mov_df$Occupation)
full_mov_df$MovieTitle <- as.factor(full_mov_df$MovieTitle)
full_mov_df$ReleaseYear <- as.factor(full_mov_df$ReleaseYear)
# converting generes to factors which are from col 15 to 32 in the full_mov_df
full_mov_df[15:32] <- lapply(full_mov_df[15:32], as.factor)
str(full_mov_df)
full_mov_df <- left_join(ratings_df, usrs_df, by = "UserID")
full_mov_df <- left_join(full_mov_df, mov_df, by = "MovieID")
check_df(full_mov_df, 0)
str(full_mov_df)
full_mov_df$Rating <- as.factor(full_mov_df$Rating)
full_mov_df$AgeRange <- as.factor(full_mov_df$AgeRange)
full_mov_df$Gender <- as.factor(full_mov_df$Gender)
full_mov_df$Occupation <- as.factor(full_mov_df$Occupation)
full_mov_df$MovieTitle <- as.factor(full_mov_df$MovieTitle)
full_mov_df$ReleaseYear <- as.factor(full_mov_df$ReleaseYear)
# converting generes to factors which are from col 15 to 32 in the full_mov_df
full_mov_df[15:32] <- lapply(full_mov_df[15:32], as.factor)
